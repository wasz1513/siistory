<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	namespace : 영역을 부르는 별칭
 	parameterType : 이 명령을 실행하기 위해 필요한 데이터의 형태
 	resultType : 결과물의 형태 (반환값)

	<![CDATA[ sql구문 ]]> : 태그때문에 못쓰는 되는 기호들은 CDATA로 해결이 가능
	
	#{} : 형태를 추론하여 자동으로 따옴표 설정 및 인코딩 처리를 수행
	${} : 값을 있는 그대로 출력하는 명령이므로 주로 "항목:에 사용
		$는 SQL Injection 이라는 해킹공격에 매우 취약하므로 사용에 주의 
-->

<!-- 	<insert id="insert" parameterType="memoDto"> -->
<!-- 		<![CDATA[ -->
<!-- 		insert into memo values(memo_seq.nextval, #{content}, sysdate) -->
<!-- 		]]> -->
<!-- 	</insert> -->
	
<!-- 	<select id="getList" resultType="memoDto"> -->
<!-- 		select * from memo order by no desc -->
<!-- 	</select> -->
	
<!-- 	<select id="search" resultType="memoDto" parameterType="map"> -->
<!-- 		select * from memo  -->
<!-- 		<if test="type !=null and keyword !=null"> -->
<!-- 		where ${type} like '%'||#{keyword}||'%'  -->
<!-- 		</if>		 -->
<!-- 		order by no desc		 -->
<!-- 	</select> -->

<mapper namespace="member">
<!-- 	seq생성 -->
	<select id="seqno" resultType="seqVo">
		select member_seq.nextval seq_no from dual
	</select>
<!-- 	회원가입 -->
	<insert id="regist" parameterType="memberDto">
		insert into member(member_no, email, member_name, member_pw, member_state, last_login) values(#{member_no}, #{email}, #{member_name}, #{member_pw}, '정상', sysdate)
	</insert>
	
<!-- 	회원가입시 member_profile table member_no 설정 -->
	<insert id="regist_profile" parameterType="memberDto">
		insert into member_profile(member_no) values(#{member_no})
	</insert>
	
<!-- 	로그인 -->
	<select id="login" parameterType="memberDto" resultType="memberDto">
		select * from member where email=#{email}
	</select>
	
<!-- 	마지막 로그인 시간 업데이트 -->
	<update id="last-login" parameterType="memberDto">
		update member set last_login = sysdate where email=#{email}
	</update>
		
<!-- 	단일조회 -->
	<select id="getMember" parameterType="int" resultType="memberDto">
		select * from member where member_no=#{member_no}
	</select>
	
<!-- 	단일조회(멤버 전체 정보 / member + member_profile)-->
	<select id="getMemberVo_name" parameterType="string" resultType="memberVo">
		select * from member_member_profile where member_name = #{member_name}
	</select>
	
<!-- 	단일조회(멤버 전체 정보 / member + member_profile) -->
	<select id="getMemberVo_no" parameterType="int" resultType="memberVo">
		select * from member_member_profile where member_no = #{member_no}
	</select>
	
<!-- 	아이디중복검사 -->
	<select id="idcheck" parameterType="string" resultType="int">
		select count(*) from member where email=#{email}
	</select>
	
<!-- 	닉네임중복검사 -->
	<select id="namecheck" parameterType="string" resultType="int">
		select count(*) from member where member_name=#{username}
	</select>	
	
<!-- 	이메일 인증 입력-->
	<insert id="cert" parameterType="certDto">
		insert into cert values(cert_seq.nextval, #{email}, #{cert}, sysdate)
	</insert>
	
<!-- 	비밀번호 변경 -->
	<update id="changePw" parameterType="memberDto">
		update member set member_pw=#{member_pw} where email=#{email}
	</update>
	
<!-- 	회원검색(email) -->
<!-- 	<resultMap id="memberList" type="memberDto"> -->
<!-- 		<id property="member_no" column="member_no"/> -->
<!-- 		<result property="email" column="email"/> -->
<!-- 		<result property="member_name" column="member_name"/> -->
<!-- 		<result property="member_state" column="member_state"/> -->
<!-- 			<collection property="followList" ofType="followDto"> -->
<!-- 				<id property="seq_no" column="seq_no"/> -->
<!-- 				<result property="friend_no" column="friend_no"/> -->
<!-- 				<result property="follower" column="follower"/> -->
<!-- 				<result property="following" column="following"/> -->
<!-- 				<result property="follow_state" column="follow_state"/> -->
<!-- 			</collection> -->
<!-- 	</resultMap> -->

<!-- 	회원검색(email) -->
	<select id="getMember_email" parameterType="memberDto" resultType="memberFollowVo">
		select
		    M.member_no, 
		    M.email, 
		    M.member_name ,
		    F.follower,
		    F.following,
		    F.friend_state
		from 
		    member M
		        left outer join (select * from friend_test where member_no=#{member_no}) F on M.member_no = F.friend_no
		where M.email like '%'||#{email}||'%' and M.member_state='정상' order by M.member_no
	</select>
	
<!-- 	회원검색(member_name) -->
	<select id="getMember_name" parameterType="memberDto" resultType="memberFollowVo">
		select
		    M.member_no, 
		    M.email, 
		    M.member_name ,
		    F.follower,
		    F.following,
		    F.friend_state
		from 
		    member M
		        left outer join (select * from friend_test where member_no=#{member_no}) F on M.member_no = F.friend_no
		where M.member_name like '%'||#{member_name}||'%' and M.member_state='정상' order by M.member_no
	</select>
	
<!-- 	회원정보 검색	 -->
	<select id="member_info" parameterType="map" resultType="memberProfileVo">
		select
		    M.*,
		    F.follower,
		    F.following,
		    F.friend_state
		from 
		    member_member_profile M
		        left outer join (select * from friend_test where member_no=#{my_member_no}) F on M.member_no = F.friend_no
        where M.member_no=#{member_no}
	</select>
	
	<!-- 휴면계정 정상계정으로 전환 -->
	<update id="dormant" parameterType="memberDto">
		update member set member_state='정상' where email=#{email}
	</update>
	
<!-- 	회원탈퇴 -->
	<update id="withdraw" parameterType="int">
		update member set member_state='탈퇴' where member_no=#{member_no}
	</update>
	
<!-- 	자기자신 친구 -->
	<insert id="me" parameterType="seqVo">
		insert into friend_test values(friend_test_seq.nextval, #{seq_no}, #{seq_no}, 1, 1, 1)
	</insert>	
	
<!-- 	태그 검색 -->
	<resultMap id="dashboardlist" type="boardDto"> 
	  <id property="board_no" column="board_no" />
	  <result property="board_content" column="board_content"/>
	  <result property="board_writer" column="board_writer"/>
	  <result property="member_no" column="member_no"/>
	  <result property="board_reply_count" column="board_reply_count"/>
	  <result property="board_state" column="board_state"/>
	  <result property="photo" column="photo"/>
	  <result property="board_like" column="board_like"/>
	  <result property="board_like_count" column="board_like_count"/>
		  <collection property="replylist" ofType="replyDto">
		    <id property="reply_no" column="reply_no"/>
		    <result property="reply_content" column="reply_content"/>
		    <result property="reply_writer" column="reply_writer"/>
		    <result property="writer_no" column="writer_no"/>
		    <result property="depth" column="depth"/>
		    <result property="reply_like" column="reply_like"/>
		    <result property="reply_like_count" column="reply_like_count"/>
		  </collection>
	</resultMap>

	<select id="search-tag" parameterType="string" resultMap="dashboardlist">
		select 
			* 
		from (
			select 
				bb.*, rr.reply_no, rr.reply_content, rr.reply_writer, rr.writer_no, rr.depth, rr.reply_like,
                (select count(*) from board_like where board_like.board_no = bb.board_no ) as board_like_count,
				(select count(*) from reply where bb.board_no = reply.board_no) as board_reply_count, 
                (select count(*) from reply_like where reply_like.reply_no = rr.reply_no ) as reply_like_count,
				row_number() OVER (PARTITION BY bb.board_no ORDER BY bb.board_no) as rk
			from 
				(select b.*,bl.member_no as board_like from board b left outer join (select * from board_like where member_no= 63) bl on b.board_no = bl.board_no)  bb
			left outer join 
				(select r.*,rl.member_no as reply_like from 
(select * from reply where depth = 0) r left outer join (select * from reply_like where member_no = 63) rl  on r.reply_no = rl.reply_no) rr
			on 
				bb.board_no = rr.board_no
			)
        where 
        	rk <![CDATA[<]]> 3
        and board_content like '%#'||#{keyword}||'%'
        and board_state = 0
            order by board_like_count desc
	</select>
</mapper>